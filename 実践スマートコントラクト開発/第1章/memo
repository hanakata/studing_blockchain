第1章 ブロックチェーンの概念

ブロックチェーンは基本的にはデータ構造である。
一意なブロックを連結したリスト、つまりチェーン。
各ブロックは1つ前のブロックを指しておりブロック自体はトランザクションのリスト。
イーサリアムはスマートコントラクトと呼ばれるものを使って暗号によって保護されたプラットフォームを提供する。

ブロックチェーンの略史
ブロックチェーンはBitcoinという論文から生まれた概念である。
価値交換のトランザクションがP2Pネットワークに送信され定期的にブロックにまとめられる。
トランザクションのブロックは永続化されるときに1つ前のブロックに連結される。
→追加専用のデータ構造でありこのデータ構造を生成するプロトコルはトランザクションの
　イミュータブルな記録を作成する。

ブロックチェーンの特徴
より一般的なデータベースと同様にブロックチェーンでも任意のデータを格納できるが
それ以外に共有点はほぼない。
優秀なスマートコントラクト開発者になる＝ブロックチェーンの特性を理解するということ
Solidityをサーバ側のプログラミング言語のように扱うことはできない。
スマートコントラクトがどれほど基本的なものであってもやり取りが瞬時に行われることはなく
恒久的であることは保証されない。
ブロックチェーンはたいてい世界規模のネットワークにおいて多くのノードで構成されている。
ブロックチェーンで言うノードはだれかがコンピュータにインストールしブロックチェーンネットワークに
接続しているソフトウェアを指す。

非中央集権ネットワーク
一般的なデータベースを操作するにはデータベース接続とデータベースを更新するための十分な権限が必要となる。
ブロックチェーンは非中央集権ネットワークで動作することを前提として設計されている。
人々や企業はネットワーク上でノードを実行する。
ノードはすべてのピアである。これが可能なのはすべてのトランザクションの完全な履歴が
すべてのノードに含まれているから。
ノードの1つ1つが自己充足型の独立したエンティティでありネットワークの中心はどこにもない。
トランザクションはすぐに世界中のすべてのノードに伝搬するが、
すぐではないので2つの異なるノードで2つのブロックが同時に作成された場合、
それらの分岐ノードのそれぞれのピアが2つのバージョンのブロックチェーン上で動作することになる
→これを一時的なフォークと呼ぶ
一時的なフォークは次のブロックをどちらのフォークに追加するのかについて優先度を決めることで解決する。
勝つのは最も長いチェーン。

コンセンサスプロトコル
信頼できる中央の情報源がないため、ブロックチェーンネットワーク内のノードがシステムの状態について
合意を得るための手段が必要。
この合意を可能にするのがコンセンサスプロトコル。
コンセンサスプロトコルは要するにブロックチェーン全体の合意の仕組み。
プロトコルは3つ。
・Proof-of-Work
Proof-of-Workを使ったブロックの作成には少なからぬ労力が求められる。
労力を費やせば費やすほどブロックを掘り当てる可能性は高くなる。
またProof-of-Workのマイニングは競争である。
各イーサリアムの通貨単位でのブロック報酬が含まれている。
このイーサと呼ばれる報酬は有効なブロックを誰よりも先にブロックチェーンに追加することに成功したマイナーに与えられる。
マイナーは特定の特徴を持つ暗号学的ハッシュを見つけ出すためにブロックデータを連続的に
ハッシュ化することでブロックの追加を成功させる。
Proof-of-Workはこれらのハッシュ値の希少性を判断する。
ハッシュ値の希少性はディフィカルティと呼ばれ
この数字によってマイナーがブロックをマイニングするために費やされなければならない相対的な作業量が決まる。
Proof-of-Workではマイナーが現れては消え、ネットワークの全体的なマイニングパワーが増えたり減ったりする中で
難易度変数を使って安定したブロックタイムを維持する。
・Proof-of-Stake
Proof-of-Stakeは当初からイーサリアムのロードマップにあったプロトコルである。
正しく設計すればProof-of-StakeにはProof-of-Workよりも大きなメリットがある。
まず有効なブロックを掘り当てるために大量の電力を消費する必要がない。
次にProof-of-Stakeシステムでは不正を働くことのリスクがProof-of-Workよりもはるかに高い可能性がある。
→ブロックの作成者は参加するためにイーサを差し出す。悪意を持つ行為を行っていることが証明された場合、
　そのステークがすべて没収される可能性がある。
Proof-of-Stakeはステークが多い人ほどイーサを多く獲得することになるがそのアドバンテージは線形である。
Proof-of-Stakeでは通貨を獲得する場合、すでに所有している所有者から購入する必要がある。
スマートコントラクトの開発者にとってProof-of-WorkとProof-of-Stakeの違いはそれほどない。
Proof-of-Stakeでもトランザクションが確定したとみなされる状況を判断しなければならない。
→ブロック作成者がネットワークパーティションのせいで異なるフォークにおかれる可能性があるから。

Proof-of-Authority
ブロック作成者が制限されている状態が必要な場合Proof-of-Authorityプロトコルで可能。
Proof-of-Authorityは内部ネットワークに隠れているプライベートブロックチェーンでよく使われるプロトコル。
ブロック作成者は単に次のブロックを正しい頻度で順番に追加していく。
このつくりのため一時的なフォークが発生する可能性は低い。

トランザクションの処理
イーサリアムブロックチェーンに追加される新しいトランザクションブロックは13秒に1つ。
ブロックチェーンへの書き込みで時間がかかったりかからなかったりするパターンがあるが、
そういったことが起きる要因としてはProof-of-Workのランダム性に起因。
ブロックタイムはプロトコルによって制御されるがトランザクションに実際かかる時間は数秒から数時間。
これは現在のイーサリアムプロトコルの制限と人気が相まって生じる。
例えば1秒間に25件のトランザクションを処理できるイーサリアムがあったとして、
1秒間に30件を超えた場合保留状態のトランザクションが存在することとなる。
→保留状態となる。そのようなトランザクションはメモリプールと呼ばれる各イーサリアムノードのメモリ内にとどまる。
トランザクションをメモリプールからブロックへ速やかに移動させる最も確実な方法がブロック作成者に支払う手数料をあげること。
→この手数料をガスと呼ぶ。
ガスを引き上げることで件数が減ることが多々ある。
同じアカウントのメモリプールにトランザクションが2件含まれる場合、
先に選択するトランザクションをナンスに基づいて決める。
ナンスとはアカウントごとのカウンタのことでトランザクションごとに増えていく。

トランザクションのファイナリティ
一般的なデータベースの場合、トランザクションが正常に実行されたときは
開発者側としてその結果がロールバックされないと考える。
ブロックチェーンの場合、正常に追加されたとしてもその直後ブロックが孤立し
別のブロックに置き換えられるということがある。
こういったファイナリティの欠如はネットワークの非中央集権的な性質に起因する。
例えば2つのノードがほぼ同時にブロックを作成しそれぞれのピアがブロックチェーンの別々のフォークに属した場合、
どちらかのチェーンが次のブロックを作成するともう1つのフォークは敗れるので
敗れた方のチェーンのトランザクションは成功していたにも関わらず消える。
この問題を解決するにはチェーンに新しいブロックが追加されるのを待ってトランザクションを確定したとみなせばよい。

ハードフォーク
ブロックチェーンネットワーク上の各ノードは新しいブロック作成とブロックやトランザクションの伝搬に参加するために
プロトコルと互換性があるソフトウェアを実行しなければならない。
当然ながら開発は進むので互換性がないバージョンも存在してくる。
この状況をハードフォークと呼ぶ。
ハードフォークには議論を引き起こすものとそうでないものがあり、
引き起こさないものはコミュニティ全体がアップグレードし古いフォークから新しいフォークへ乗り換えるとき。

イーサリアムの基礎
イーサとガス
イーサリアムプロトコルはイーサと呼ばれる独自通貨を使う。
基本的な用途はトランザクションをブロックに追加することに対するブロック作成者への支払い。
米ドルと同様に小さな単位に分割は可能。
イーサの最小単位はウェイ。1ギガウェイは10億ウェイ、10億ギガウェイは1イーサ。
イーサリアムプロトコルは1つだけだが、プロトコルを実行するネットワークは複数存在する
→プライベートで使うインターネットをイントラネットと呼ぶような感じ。
プライベートネットワークでもイーサをパブリックイーサリアムと同じように扱うが
それらのイーサは公開市場では価値を持たない。
パブリックの場合ETHと呼ばれ公開市場でも価値を持つ。
パブリックイーサリアムネットワーク＝メインネット
プライベートイーサリアムネットワーク＝テストネット
→フォーセットがある。フォーセットは開発者がスマートコントラクトをテストできるようイーサを無償で配るメカニズム。
価値を持つイーサはメインネットのETHのみ。
スマートコントラクトをメインネットにデプロイして実行するには、もらうか買うか採掘するか。
Solidityなどのスマートコントラクトコードはバイトコードにコンパイルされ
イーサリアム仮想マシンに一連のオペコードを提供する。
オペコードにはそれぞれガス費用が割り当てられている。
ガスの概念はイーサの価格をイーサリアムのトランザクション手数料から切り離すため。
→切り離していなければイーサリアムのトランザクション手数料がイーサの価格に固定されて
　ETHの価値の変動性によってエコシステムにマイナスの影響が及ぶから。
ブロック作成者がブロックに追加するトランザクションを決める際には各自の計算量に対して
最も多くgasPriceがもらえるトランザクションを追加するというインセンティブが働く。
イーサリアムのトランザクションにはそれぞれのgas属性とgasPrice属性が含まれていなければならない。

アカウント
イーサリアムの最も基本的なトランザクションはEOA間でのイーサの送金。
それに加えてEOAからスマートコントラクトにイーサリアムのトランザクションを送信することもできる。
EOAとスマートコントラクトはどちらもイーサリアムアドレスによって識別される。
アドレスは16進数。同一のアドレスを生成すうｒのは大きさ的に不可能。
ブロックチェーンを調べない限りスマートコントラクトとＥＯＡのアドレスの見分けは不可能。
ただし重要な違いはいくつかある。
イーサリアムブロックチェーンの各トランザクションを開始するのはEOA。
スマートコントラクトが自発的にアクションを起こすことは不可能。
EOAにできることはトランザクションを開始すること以外にイーサを受け取ることだけ。

コントラクト
Solidityで記述されるコントラクトはJavaプログラムと同じようなオブジェクト指向スタイルで構成。
コントラクトはオブジェクト指向でいうクラス＝状態変数と関数の集まり。
Solidityは読み取り専用関数をpureとviewのそれぞれのキーワードで表す。
読み取り専用なのでブロックチェーンが更新されることもないのでガス費用を払う必要もない。
読み取り専用といってもデータを返すことはできる。ただし非同期なので実質的に無意味。
イーサリアムのイベントには主に2つの目的がある。
1つはこれまでに行われたことのカスタム履歴ログをコントラクトで提供すること
2つめはオブザーバーがリアルタイムの更新を購読できること

ブロックとトランザクション
ブロックにどのトランザクションが書き込まれるかといったブロックの属性を決めるのはイーサリアムのブロック作成者のみ
どうようにデータの送信先となるコントラクトなどトランザクションの属性を決めるのはイーサリアムのユーザのみ。
Solidityではトランザクションの属性として次の2つを定義している。
・gasPrice
・origin
メッセージの属性は以下
・data
・sender
・sig
・value
block属性としては以下
・number
・timestamp
・blockhash
・difficulty
・gaslimit
・coinbase

トランザクションの署名
トランザクションに署名するとき、その署名が特定の秘密鍵によって作成されたものであることを確信できる理由は？
→公開鍵暗号法。EOAのアドレスはその公開鍵のハッシュ値を切り取ったもの
秘密鍵はトランザクションの署名に使われるものなのでEOAの秘密鍵を知ること＝アカウントを所有
暗号署名がなければトランザクションが指定されたEOAから実際に送信されたものかを証明する手立てはない。